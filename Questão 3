#include <stdio.h>

int main(){

    int matrizA[4][4];
    int matrizB[4][4];
    int matrizC[4][4];
    char operacao[5];

    for(int linhaA = 0; linhaA < 4; linhaA++){
        for(int colunaA = 0; colunaA < 4; colunaA++){
            scanf("%d", &matrizA[linhaA][colunaA]);
        }
    }
    
    for(int linhaB = 0; linhaB < 4; linhaB++){
        for(int colunaB = 0; colunaB < 4; colunaB++){
            scanf("%d", &matrizB[linhaB][colunaB]);
        }
    }

    printf("Matriz A:\n");
    for(int linhaA = 0; linhaA < 4; linhaA++){
        for(int colunaA = 0; colunaA < 4; colunaA++){
            printf("%d\t", matrizA[linhaA][colunaA]);
        }
        printf("\n");
    }

    printf("Matriz B:\n");
    for(int linhaB = 0; linhaB < 4; linhaB++){
        for(int colunaB = 0; colunaB < 4; colunaB++){
            printf("%d\t", matrizB[linhaB][colunaB]);
        }
        printf("\n");
    }

    printf("Qual a operacao:\n");
    scanf("%s", operacao);
     
    if(strcmp(operacao,"soma")==0){
        for(int linhaC = 0; linhaC < 4; linhaC++){
               for(int colunaC = 0; colunaC < 4; colunaC++){
               matrizC[linhaC][colunaC] = matrizA[linhaC][colunaC] + matrizB[linhaC][colunaC];
               }
        }
    } else if(strcmp(operacao, "sub") == 0){
        for(int linhaC = 0; linhaC < 4; linhaC++){
               for(int colunaC = 0; colunaC < 4; colunaC++){
               matrizC[linhaC][colunaC] = matrizA[linhaC][colunaC] - matrizB[linhaC][colunaC];
               }
        }
    } else if(strcmp(operacao, "mult") == 0){
        for(int linhaC = 0;linhaC < 4; linhaC++){
               for(int colunaC = 0; colunaC < 4; colunaC++){
               matrizC[0][0] = matrizA[0][0] * matrizB[0][0] + matrizA[0][1] * matrizB[1][0] + matrizA[0][2] * matrizB[2][0] + matrizA[0][3] * matrizB[3][0];
               matrizC[0][1] = matrizA[0][0] * matrizB[0][1] + matrizA[0][1] * matrizB[1][1] + matrizA[0][2] * matrizB[2][1] + matrizA[0][3] * matrizB[3][1];
               matrizC[0][2] = matrizA[0][0] * matrizB[0][2] + matrizA[0][1] * matrizB[1][2] + matrizA[0][2] * matrizB[2][2] + matrizA[0][3] * matrizB[3][2];
               matrizC[0][3] = matrizA[0][0] * matrizB[0][3] + matrizA[0][1] * matrizB[1][3] + matrizA[0][2] * matrizB[2][3] + matrizA[0][3] * matrizB[3][3];
               
               matrizC[1][0] = matrizA[1][0] * matrizB[0][0] + matrizA[1][1] * matrizB[1][0] + matrizA[1][2] * matrizB[2][0] + matrizA[1][3] * matrizB[3][0];
               matrizC[1][1] = matrizA[1][0] * matrizB[0][1] + matrizA[1][1] * matrizB[1][1] + matrizA[1][2] * matrizB[2][1] + matrizA[1][3] * matrizB[3][1];
               matrizC[1][2] = matrizA[1][0] * matrizB[0][2] + matrizA[1][1] * matrizB[1][2] + matrizA[1][2] * matrizB[2][2] + matrizA[1][3] * matrizB[3][2];
               matrizC[1][3] = matrizA[1][0] * matrizB[0][3] + matrizA[1][1] * matrizB[1][3] + matrizA[1][2] * matrizB[2][3] + matrizA[1][3] * matrizB[3][3];

               matrizC[2][0] = matrizA[2][0] * matrizB[0][0] + matrizA[2][1] * matrizB[1][0] + matrizA[2][2] * matrizB[2][0] + matrizA[2][3] * matrizB[3][0];
               matrizC[2][1] = matrizA[2][0] * matrizB[0][1] + matrizA[2][1] * matrizB[1][1] + matrizA[2][2] * matrizB[2][1] + matrizA[2][3] * matrizB[3][1];
               matrizC[2][2] = matrizA[2][0] * matrizB[0][2] + matrizA[2][1] * matrizB[1][2] + matrizA[2][2] * matrizB[2][2] + matrizA[2][3] * matrizB[3][2];
               matrizC[2][3] = matrizA[2][0] * matrizB[0][3] + matrizA[2][1] * matrizB[1][3] + matrizA[2][2] * matrizB[2][3] + matrizA[2][3] * matrizB[3][3];
             
               matrizC[3][0] = matrizA[3][0] * matrizB[0][0] + matrizA[3][1] * matrizB[1][0] + matrizA[3][2] * matrizB[2][0] + matrizA[3][3] * matrizB[3][0];
               matrizC[3][1] = matrizA[3][0] * matrizB[0][1] + matrizA[3][1] * matrizB[1][1] + matrizA[3][2] * matrizB[2][1] + matrizA[3][3] * matrizB[3][1];
               matrizC[3][2] = matrizA[3][0] * matrizB[0][2] + matrizA[3][1] * matrizB[1][2] + matrizA[3][2] * matrizB[2][2] + matrizA[3][3] * matrizB[3][2];
               matrizC[3][3] = matrizA[3][0] * matrizB[0][3] + matrizA[3][1] * matrizB[1][3] + matrizA[3][2] * matrizB[2][3] + matrizA[3][3] * matrizB[3][3];
               }
        } 
    }

        printf("Matriz C:\n");
        for(int linhaC = 0; linhaC < 4; linhaC++){
               for(int colunaC = 0; colunaC < 4; colunaC++){
               printf("%4d", matrizC[linhaC][colunaC]);
               }
        printf("\n");
        }
    
    return 0;
}
